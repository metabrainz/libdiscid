name: Build

on:
  push:
  pull_request:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest]
    steps:
    - uses: actions/checkout@v3
    - name: Build and test
      run: |
        mkdir build
        cd build
        cmake ..
        make
        make check

  package-source:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        path: libdiscid
        fetch-depth: 0
    - name: Set version
      run: |
        cd libdiscid
        TAG=$(git describe)
        echo "VERSION=$(echo $TAG | sed 's/^v//')" >> $GITHUB_ENV
    - name: Autotools
      run: |
        cd libdiscid
        ./autogen.sh
    - name: Make source tarball
      run: |
        mkdir artifacts/
        rm -rf libdiscid/.git
        rm -rf libdiscid/.github
        rm -rf libdiscid/.gitattributes
        rm -rf libdiscid/.gitignore
        rm -rf libdiscid/autom4te.cache
        mv libdiscid libdiscid-$VERSION
        tar czf artifacts/libdiscid-$VERSION.tar.gz libdiscid-$VERSION/
    - name: Archive production artifacts
      uses: actions/upload-artifact@v3
      with:
        name: libdiscid-source
        path: artifacts/libdiscid-${{ env.VERSION }}.tar.gz

  package-windows:
    runs-on: windows-2019
    strategy:
      matrix:
        generator:
        - Visual Studio 16 2019
        architecture:
        - Win32
        - x64
    steps:
    - uses: actions/checkout@v3
    - name: Setup cmake
      run: |
        mkdir build
        cd build
        cmake -G $env:GENERATOR -A $env:ARCH ..
      env:
        GENERATOR: ${{ matrix.generator }}
        ARCH: ${{ matrix.architecture }}
    - name: Build
      run: cmake --build build --config Release
    - name: Package
      run: |
        cd build
        mkdir artifacts
        cp .\Release\* artifacts
        cp -R .\include artifacts
        cp ..\COPYING artifacts
        cp ..\README artifacts
        cp ..\ChangeLog artifacts
    - name: Archive production artifacts
      uses: actions/upload-artifact@v3
      with:
        name: libdiscid-windows-${{ matrix.architecture }}
        path: build/artifacts/
    - name: Test
      run: |
        cd build
        cmake --build . --config Release --target test_core test_put test_read test_read_full
        .\Release\test_core.exe
        .\Release\test_put.exe
        # .\Release\test_read.exe
        # .\Release\test_read_full.exe

  package-macos:
    runs-on: macos-11
    env:
      MACOSX_DEPLOYMENT_TARGET: "10.10"
    steps:
    - uses: actions/checkout@v3
    - name: Build
      run: |
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Release -D "CMAKE_OSX_ARCHITECTURES=arm64;x86_64" ..
        make
        lipo libdiscid.0.dylib -verify_arch arm64 x86_64
    - name: Package
      run: |
        cd build
        mkdir -p artifacts/universal2
        cp -Lv libdiscid.0.dylib artifacts/universal2/
        for arch in arm64 x86_64; do
          mkdir -p "artifacts/${arch}"
          lipo artifacts/universal2/libdiscid.0.dylib \
            -thin $arch \
            -output artifacts/${arch}/libdiscid.0.dylib
        done
        cp -Rv include artifacts/
        cp -v ../COPYING ../README ../ChangeLog artifacts
    - name: Archive production artifacts
      uses: actions/upload-artifact@v3
      with:
        name: libdiscid-macos
        path: build/artifacts

  release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs:
    - package-source
    - package-macos
    - package-windows
    steps:
    - uses: actions/checkout@v3
    - name: Set version
      run: |
        TAG=${GITHUB_REF##*/}
        echo "VERSION=$(echo $TAG | sed 's/^v//')" >> $GITHUB_ENV
    - uses: actions/download-artifact@v3
      with:
        name: libdiscid-windows-Win32
        path: artifacts/libdiscid-windows-${{ env.VERSION }}-win32/
    - uses: actions/download-artifact@v3
      with:
        name: libdiscid-windows-x64
        path: artifacts/libdiscid-windows-${{ env.VERSION }}-win64/
    - uses: actions/download-artifact@v3
      with:
        name: libdiscid-macos
        path: artifacts/libdiscid-macos-${{ env.VERSION }}/
    - uses: actions/download-artifact@v3
      with:
        name: libdiscid-source
        path: artifacts/release/
    - name: Make zips
      run: |
        cd artifacts/
        dirs=$(find . -name 'libdiscid-*' -type d)
        for dir in $dirs
        do
          name=$(basename $dir)
          zip release/$name.zip $dir/*
        done
    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/release/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}